{"version":3,"sources":["@components/AppBar/AppBar.tsx","@store/current-weather/selectors.ts","@api/api.ts","@api/currentWeather-api.ts","@store/current-weather/slice.ts","@components/CurrentWeather/CurrentWeatherData/CurrentWeatherData.tsx","@components/CurrentWeather/Location/Location.tsx","@components/CurrentWeather/CurrentWeather.tsx","@store/forecast/selectors.ts","@api/forecast-api.ts","@store/forecast/slice.ts","@components/Forecast/ForecastDay/ForecastDay.tsx","@components/Forecast/Forecast.tsx","@store/search/selectors.ts","@api/search-api.ts","@store/search/slice.ts","@components/Search/Search.tsx","@hooks/useDebounce.tsx","#/App.tsx","@store/index.ts","configureStore.ts","@components/UI/LoadingPage/LoadingPage.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","marginTop","width","marginBottom","SimpleAppBar","props","classes","className","AppBar","position","color","Toolbar","Typography","variant","currentWeatherSelector","state","currentWeather","API_KEY","instance","axios","create","baseURL","currentWeatherApi","lat","lon","get","getUserCoordinatesTC","createAsyncThunk","undf","thunkAPI","navigator","geolocation","getCurrentPosition","dispatch","userCoordinatesAC","coords","latitude","longitude","getCurrentWeatherTC","param","a","res","setLocationAC","data","location","current","rejectWithValue","response","slice","createSlice","name","initialState","reducers","action","payload","extraReducers","builder","addCase","fulfilled","currentWeatherReducer","reducer","actions","CurrentWeatherData","temp_c","condition","last_updated","humidity","wind_kph","wind_dir","gust_kph","updateDate","Date","last_updated_weekday","toLocaleString","weekday","last_updated_date","year","month","day","Grid","container","spacing","item","xs","md","src","icon","alt","text","faCalendarAlt","component","faTemperatureHigh","faWater","faWind","faBacon","Location","region","country","card","minWidth","CurrentWeather","useDispatch","useSelector","useEffect","Card","CardContent","forecastdaySelector","forecast","forecastday","forecastAPI","days","getForecastTC","forecastReducer","ForecastDay","weekDay","date","sunrise","sunset","condition_text","min_temp","max_temp","faSun","faMoon","theme","createStyles","flexGrow","paper","padding","textAlign","palette","secondary","Forecast","forecastInfo","currentWeekday","currentDate","Divider","map","d","adaptedDate","Paper","astro","mintemp_c","maxtemp_c","nanoid","searchDataSelector","search","searchAPI","place","searchTC","clearData","searchReducer","clearDataAC","Search","searchData","useState","searchVal","setSearchVal","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","onPlaceClick","useCallback","length","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","id","onChange","event","currentTarget","trim","startAdornment","InputAdornment","labelWidth","onClick","role","aria-hidden","AppContainer","elevation","rootReducer","combineReducers","logger","createLogger","collapsed","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","middleware","getDefaultMiddleware","thunk","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","devTools","persistor","persistStore","LoadingPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootEl","document","getElementById","createMuiTheme","THEME","render","StrictMode","loading","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.2dd42aee.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, AppBar, Toolbar, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: 8,\n    width: '100%',\n    marginBottom: 16,\n  },\n});\n\nexport const SimpleAppBar: React.FC = (props) => {\n  const classes = useStyles(props);\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h6\">Weather App</Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import { RootState } from '..';\n\nexport const currentWeatherSelector = (state: RootState) => {\n  return state.currentWeather;\n};\n","import axios from 'axios';\n\nexport const API_KEY = 'ad86b534a1a14d4891f171701201710';\n\nexport const instance = axios.create({\n  baseURL: 'https://api.weatherapi.com/v1',\n});\n","import { LocationResponseType, CurrentWeatherResponseType } from '../@types';\nimport { API_KEY, instance } from './api';\n\nexport const currentWeatherApi = {\n  currentWeather(lat: number, lon: number) {\n    return instance.get<CurrectWeatherType>(\n      `/current.json?key=${API_KEY}&q=${lat},${lon}`,\n    );\n  },\n};\n\nexport type CurrectWeatherType = {\n  location: LocationResponseType;\n  current: CurrentWeatherResponseType;\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { currentWeatherApi } from '../../@api/currentWeather-api';\nimport { CurrentWeatherResponseType, LocationResponseType } from '../../@types';\n\nconst currentWeatherInitialState = {\n  lat: 0, // lat: 51.5341714,\n  lon: 0, // lon: 33.3767724,\n  location: {} as LocationResponseType,\n  currentWeather: {} as CurrentWeatherResponseType,\n};\n\nexport const getUserCoordinatesTC = createAsyncThunk(\n  'currentWeather/getUserCoordinatesTC',\n  (undf, thunkAPI) => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      thunkAPI.dispatch(\n        userCoordinatesAC({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        }),\n      );\n    });\n  },\n);\n\nexport const getCurrentWeatherTC = createAsyncThunk(\n  'currentWeather/getCurrentWeather',\n  async (param: { lat: number; lon: number }, thunkAPI) => {\n    try {\n      const res = await currentWeatherApi.currentWeather(param.lat, param.lon);\n      thunkAPI.dispatch(setLocationAC(res.data.location));\n      return { currentWeather: res.data.current };\n    } catch (err) {\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\n      // by explicitly returning it using the `rejectWithValue()` utility\n      return thunkAPI.rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'currentWeather',\n  initialState: currentWeatherInitialState,\n  reducers: {\n    userCoordinatesAC(\n      state,\n      action: PayloadAction<{ lat: number; lon: number }>,\n    ) {\n      state.lat = action.payload.lat;\n      state.lon = action.payload.lon;\n    },\n    setLocationAC(state, action: PayloadAction<LocationResponseType>) {\n      state.location = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getCurrentWeatherTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.currentWeather = action.payload.currentWeather;\n      }\n    });\n  },\n});\n\nexport const currentWeatherReducer = slice.reducer;\nexport const { userCoordinatesAC, setLocationAC } = slice.actions;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faBacon,\n  faCalendarAlt,\n  faTemperatureHigh,\n  faWater,\n  faWind,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Grid, Typography } from '@material-ui/core';\nimport { CurrentWeatherResponseType } from '../../../@types';\n\nexport const CurrentWeatherData: React.FC<Props> = ({\n  currentWeather: {\n    temp_c,\n    condition,\n    last_updated,\n    humidity,\n    wind_kph,\n    wind_dir,\n    gust_kph,\n  },\n}) => {\n  const updateDate = new Date(last_updated);\n  const currentWeekday = { weekday: 'long' } as const;\n  const currentDate = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  } as const;\n  const last_updated_weekday = updateDate.toLocaleString(\n    'en-US',\n    currentWeekday,\n  );\n  const last_updated_date = updateDate.toLocaleString('en-US', currentDate);\n\n  return (\n    <div>\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={6}>\n          <div>\n            <img src={condition?.icon} width=\"150\" alt=\"condition\" />\n            <div>\n              <p>{temp_c}&#176;C</p>\n              <p>{condition?.text}</p>\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <div>\n            <p>\n              <FontAwesomeIcon icon={faCalendarAlt} />\n              <Typography component=\"span\" variant=\"subtitle1\">\n                Today:\n              </Typography>\n              {last_updated_weekday} {last_updated_date}\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faTemperatureHigh} />\n              <Typography component=\"span\" variant=\"subtitle1\">\n                Feels Like:\n              </Typography>\n              {temp_c}&#176;C\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faWater} />\n              <Typography component=\"span\" variant=\"subtitle1\">\n                Humidity:\n              </Typography>\n              {humidity} %\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faWind} />\n              <Typography component=\"span\" variant=\"subtitle1\">\n                Wind:\n              </Typography>\n              {wind_kph} km/h ({wind_dir})\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faBacon} />\n              <Typography component=\"span\" variant=\"subtitle1\">\n                Gust:\n              </Typography>\n              {gust_kph}\n            </p>\n          </div>\n        </Grid>\n      </Grid>\n      <div />\n    </div>\n  );\n};\n\ntype Props = {\n  currentWeather: CurrentWeatherResponseType;\n};\n","import { Typography } from '@material-ui/core';\nimport React from 'react';\n\ntype Props = {\n  location: {\n    name: string;\n    region: string;\n    country: string;\n  };\n};\n\nexport const Location: React.FC<Props> = ({ location }) => {\n  return (\n    <div>\n      <Typography component=\"h2\" variant=\"h6\">\n        {location.name}, {location.region}, {location.country}\n      </Typography>\n    </div>\n  );\n};\nexport default Location;\n","import { Card, CardContent, makeStyles } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { currentWeatherSelector } from '../../@store/current-weather/selectors';\nimport { getCurrentWeatherTC } from '../../@store/current-weather/slice';\nimport { CurrentWeatherData } from './CurrentWeatherData/CurrentWeatherData';\nimport { Location } from './Location/Location';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n    marginBottom: 16,\n  },\n});\n\nexport const CurrentWeather: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { lon, lat, location, currentWeather } = useSelector(\n    currentWeatherSelector,\n  );\n\n  useEffect(() => {\n    if (lat !== 0 && lon !== 0) {\n      dispatch(getCurrentWeatherTC({ lat, lon }));\n    }\n  }, [lat, lon, dispatch]);\n\n  return (\n    <div>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography component=\"h1\" variant=\"h5\">\n            CurrentWeather\n          </Typography>\n          <Location location={location} />\n          <CurrentWeatherData currentWeather={currentWeather} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","import { RootState } from '..';\n\nexport const forecastdaySelector = (state: RootState) => {\n  return state.forecast.forecastday;\n};\n","import {\n  LocationResponseType,\n  CurrentWeatherResponseType,\n  AstroResponseType,\n  DayResponseType,\n  HourResponseType,\n} from '../@types';\nimport { API_KEY, instance } from './api';\n\nexport const forecastAPI = {\n  dailyWeather(days: number, lat: number, lon: number) {\n    return instance.get<ForecastType>(\n      `/forecast.json?key=${API_KEY}&q=${lat},${lon}&days=${days}`,\n    );\n  },\n};\n\nexport type ForecastType = {\n  location: LocationResponseType;\n  current: CurrentWeatherResponseType;\n  forecast: ForecastDayInfoType;\n};\n\nexport type ForecastDayInfoType = {\n  forecastday: Array<ForecastdayResponseType>;\n};\n\nexport type ForecastdayResponseType = {\n  date: string;\n  day: DayResponseType;\n  astro: AstroResponseType;\n  hour: Array<HourResponseType>;\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { forecastAPI, ForecastdayResponseType } from '../../@api/forecast-api';\n\nconst forecastInitialState = {\n  forecastday: [] as Array<ForecastdayResponseType>,\n};\n\nexport const getForecastTC = createAsyncThunk(\n  'forecast/getForecast',\n  async (param: { days: number; lat: number; lon: number }, thunkAPI) => {\n    try {\n      const res = await forecastAPI.dailyWeather(\n        param.days,\n        param.lat,\n        param.lon,\n      );\n      return { forecastday: res.data.forecast.forecastday };\n    } catch (err) {\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\n      // by explicitly returning it using the `rejectWithValue()` utility\n      return thunkAPI.rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'forecast',\n  initialState: forecastInitialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getForecastTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.forecastday = action.payload.forecastday;\n      }\n    });\n  },\n});\n\nexport const forecastReducer = slice.reducer;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons';\n\nconst ForecastDay: React.FC<Props> = ({\n  weekDay,\n  date,\n  sunrise,\n  sunset,\n  icon,\n  condition_text,\n  min_temp,\n  max_temp,\n}) => {\n  return (\n    <div>\n      <h3>{weekDay}</h3>\n      <p>{date}</p>\n      <img src={icon} alt=\"icon\" />\n      <p>{condition_text}</p>\n      <p>\n        {min_temp} - {max_temp}&#176;C\n      </p>\n      <div>\n        <p>\n          <FontAwesomeIcon icon={faSun} /> {sunrise}\n        </p>\n        <p>\n          <FontAwesomeIcon icon={faMoon} />\n          {sunset}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ForecastDay;\n\ntype Props = {\n  weekDay: string;\n  date: string;\n  sunrise: string;\n  sunset: string;\n  icon: string;\n  condition_text: string;\n  min_temp: number;\n  max_temp: number;\n};\n","import {\n  makeStyles,\n  Theme,\n  createStyles,\n  Divider,\n  Grid,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { currentWeatherSelector } from '../../@store/current-weather/selectors';\nimport { forecastdaySelector } from '../../@store/forecast/selectors';\nimport { getForecastTC } from '../../@store/forecast/slice';\nimport ForecastDay from './ForecastDay/ForecastDay';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst Forecast: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { lon, lat } = useSelector(currentWeatherSelector);\n  const forecastInfo = useSelector(forecastdaySelector);\n  const days = 3;\n\n  useEffect(() => {\n    if (lat !== 0 && lon !== 0) {\n      dispatch(getForecastTC({ days, lat, lon }));\n    }\n  }, [lat, lon, days, dispatch]);\n\n  const currentWeekday = { weekday: 'long' } as const;\n  const currentDate = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  } as const;\n\n  return (\n    <div>\n      <Typography variant=\"h6\" color=\"textSecondary\">\n        Forecast for your area:\n      </Typography>\n      <Divider />\n\n      <Grid container spacing={1}>\n        {forecastInfo.map((d) => {\n          const adaptedDate = new Date(d.date);\n          return (\n            <Grid item xs={12} md={4} key={nanoid(8)}>\n              <Paper className={classes.paper}>\n                <ForecastDay\n                  weekDay={adaptedDate.toLocaleString('en-US', currentWeekday)}\n                  date={adaptedDate.toLocaleString('en-US', currentDate)}\n                  sunrise={d.astro.sunrise}\n                  sunset={d.astro.sunset}\n                  icon={d.day.condition.icon}\n                  condition_text={d.day.condition.text}\n                  min_temp={d.day.mintemp_c}\n                  max_temp={d.day.maxtemp_c}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import { RootState } from '..';\n\nexport const searchDataSelector = (state: RootState) => {\n  return state.search.data;\n};\n","import { searchPlaceResponseType } from '../@types';\nimport { API_KEY, instance } from './api';\n\nexport const searchAPI = {\n  place(place: string) {\n    return instance.get<searchPlaceResponseType[]>(\n      `/search.json?key=${API_KEY}&q=${place}`,\n    );\n  },\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { searchAPI } from '../../@api/search-api';\nimport { searchPlaceResponseType } from '../../@types';\n\nconst searchInitialState = {\n  data: [] as Array<searchPlaceResponseType>,\n};\n\nexport const searchTC = createAsyncThunk(\n  'search/searchTC',\n  async (place: string, thunkAPI) => {\n    try {\n      const res = await searchAPI.place(place);\n      return { data: res.data };\n    } catch (err) {\n      return thunkAPI.rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'search',\n  initialState: searchInitialState,\n  reducers: {\n    clearData(state) {\n      state.data = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(searchTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.data = action.payload.data;\n      }\n    });\n  },\n});\n\nexport const searchReducer = slice.reducer;\nexport const { clearData: clearDataAC } = slice.actions;\n","import {\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n} from '@material-ui/core';\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useDebounce from '../../@hooks/useDebounce';\nimport { getCurrentWeatherTC } from '../../@store/current-weather/slice';\nimport { getForecastTC } from '../../@store/forecast/slice';\nimport { searchDataSelector } from '../../@store/search/selectors';\nimport { clearDataAC, searchTC } from '../../@store/search/slice';\n\nconst Search: React.FC = () => {\n  const dispatch = useDispatch();\n  const searchData = useSelector(searchDataSelector);\n  const [searchVal, setSearchVal] = useState('');\n  const debouncedSearchTerm = useDebounce(searchVal, 300);\n  const days = 3;\n\n  const onPlaceClick = useCallback(\n    (lat: number, lon: number) => {\n      dispatch(getCurrentWeatherTC({ lat, lon }));\n      dispatch(getForecastTC({ days, lat, lon }));\n      dispatch(clearDataAC());\n      setSearchVal('');\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    // API response only for 3 characters\n    if (debouncedSearchTerm.length > 2) dispatch(searchTC(debouncedSearchTerm));\n  }, [debouncedSearchTerm, dispatch]);\n\n  const handleChange = () => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchVal(event.currentTarget.value.trim());\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"sectionWrap\">\n        <h2>Search</h2>\n        <FormControl fullWidth variant=\"outlined\">\n          <InputLabel htmlFor=\"search-input\">Search</InputLabel>\n          <OutlinedInput\n            id=\"search-input\"\n            value={searchVal}\n            onChange={handleChange()}\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n            labelWidth={60}\n          />\n        </FormControl>\n        {searchData.map((d) => (\n          <div\n            key={d.id}\n            onClick={() => onPlaceClick(d.lat, d.lon)}\n            role=\"menuitem\"\n            aria-hidden\n          >\n            {d.name}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import { useEffect, useState } from 'react';\n\nexport default function useDebounce(value: string, delay: number): string {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n","import React, { useEffect } from 'react';\nimport { Paper } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { SimpleAppBar } from '../@components/AppBar/AppBar';\nimport CurrentWeather from '../@components/CurrentWeather';\nimport { getUserCoordinatesTC } from '../@store/current-weather/slice';\nimport Forecast from '../@components/Forecast/Forecast';\nimport Search from '../@components/Search/Search';\n\nexport const AppContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getUserCoordinatesTC());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <SimpleAppBar />\n      <Paper elevation={3}>\n        <Search />\n      </Paper>\n      <Paper elevation={3}>\n        <CurrentWeather />\n      </Paper>\n      <Paper elevation={3}>\n        <Forecast />\n      </Paper>\n    </div>\n  );\n};\n","import { combineReducers } from 'redux';\nimport { forecastReducer } from './forecast/slice';\nimport { currentWeatherReducer } from './current-weather/slice';\nimport { searchReducer } from './search/slice';\n\nexport const rootReducer = combineReducers({\n  currentWeather: currentWeatherReducer,\n  forecast: forecastReducer,\n  search: searchReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import { createBrowserHistory } from 'history';\nimport { createLogger } from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { rootReducer } from './@store/index';\n// export const history = createBrowserHistory();\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  // blacklist: ['filter'], // will not be persisted\n  whitelist: ['filter'], // will be persisted\n};\n\n// Middleware: Redux Persist Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// const middleware = [...getDefaultMiddleware(), logger];\n// https://github.com/rt2zz/redux-persist/issues/988#issuecomment-552242978\nconst middleware = [\n  ...getDefaultMiddleware({\n    // immutableCheck: true,\n    thunk: true,\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware,\n  // devTools: process.env.NODE_ENV === 'development',\n  devTools: true,\n});\n\nexport const persistor = persistStore(store);\nexport default { store, persistor };\n","import React from 'react';\n\nexport const LoadingPage: React.FC = () => {\n  return <div>Loading...</div>;\n};\nexport default LoadingPage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { AppContainer } from './#/App';\nimport { store, persistor } from './configureStore';\nimport LoadingPage from './@components/UI/LoadingPage';\nimport reportWebVitals from './reportWebVitals';\n\n// All styles\nimport './@assets/styles/index.scss';\n\n// Open Source typefaces\nimport 'typeface-roboto';\n\nimport THEME from './theme.json';\n\nconst rootEl = document.getElementById('root');\n\nconst theme = createMuiTheme(THEME);\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<LoadingPage />} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <AppContainer />\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  rootEl,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}